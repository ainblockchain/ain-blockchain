{
  ".rule": {
    "write": false
  },
  "accounts": {
    "$user_addr": {
      "balance": {
        ".rule": {
          "write": "auth.fid === '_transfer'"
        }
      }
    }
  },
  "checkin": {
    "$user_addr": {
      "$checkin_id": {
        "request": {
          ".rule": {
            "write": "data === null && auth.addr === $user_addr && util.isDict(newData)"
          }
        },
        "parent_finalize": {
          "$tx_hash": {
            "result": {
              ".rule": {
                "write": "auth.addr === getValue('/sharding/config/shard_owner') && util.isBool(newData)"
              }
            }
          }
        }
      }
    }
  },
  "checkout": {
    "history": {
      "$user_addr": {
        "$checkout_id": {
          ".rule": {
            "write": "data === null && util.validateCheckoutHistoryData($user_addr, $checkout_id, newData, getValue) && auth.addr === util.getTokenPoolAddr(newData.request.type, newData.request.token_id, getValue)"
          },
          "refund": {
            ".rule": {
              "write": "data === null && util.isString(newData) && (auth.fid === '_closeCheckout' || auth.addr === util.getTokenPoolAddrFromHistoryData($user_addr, $checkout_id, getValue))"
            }
          }
        }
      }
    },
    "requests": {
      "$user_addr": {
        "$checkout_id": {
          ".rule": {
            "write": "(auth.fid === '_closeCheckout' && newData === null) || (data === null && auth.addr === $user_addr && util.validateCheckoutRequestData(newData, getValue))"
          }
        }
      }
    },
    "stats" : {
      ".rule": {
        "write": "auth.fid === '_openCheckout' || auth.fid === '_closeCheckout'"
      }
    }
  },
  "consensus": {
    "blacklist": {
      "$user_addr": {
        ".rule": {
          "write": "auth.fid === '_handleOffenses'"
        }
      }
    },
    "number": {
      "$number": {
        ".rule": {
          "write": "newData === null && !!getValue('/consensus/number/' + (Number($number) + 1000))"
        },
        "propose": {
          ".rule": {
            "write": "util.isDict(newData) && newData.proposer === auth.addr && Number($number) === newData.number && getValue('/consensus/whitelist/' + auth.addr) === true && (lastBlockNumber < 1 || (getValue('/service_accounts/staking/consensus/' + auth.addr + '|0/balance') >= util.getMinStakeAmount() && getValue('/service_accounts/staking/consensus/' + auth.addr + '|0/balance') <= util.getMaxStakeAmount())) && util.isNumber(newData.gas_cost_total)"
          }
        },
        "$block_hash": {
          "vote": {
            "$user_addr": {
              ".rule": {
                "write": "auth.addr === $user_addr && data === null && util.validateConsensusVoteData(newData, auth.addr, $block_hash, lastBlockNumber, getValue) === true"
              }
            }
          }
        }
      }
    },
    "rewards": {
      "$user_addr": {
        ".rule": {
          "write": "auth.fid === '_distributeFee' || auth.fid === '_claimReward'"
        }
      }
    },
    "whitelist": {
      "$user_addr": {
        ".rule": {
          "write": "util.isAppAdmin('consensus', auth.addr, getValue) === true && (newData === true || (newData === null && util.length(util.values(getValue('/consensus/whitelist')).filter(x => x === true)) > util.getMinNumValidators()))"
        }
      }
    }
  },
  "escrow": {
    "$source_account": {
      "$target_account": {
        "$escrow_key": {
          "config": {
            ".rule": {
              "write": "data === null || getValue('/escrow/' + $source_account + '/' + $target_account + '/' + $escrow_key + '/config/admin/' + auth.addr) === true"
            }
          },
          "hold": {
            "$record_id": {
              ".rule": {
                "write": "((util.isServAcntName($source_account) && util.isAppAdminFromServAcntName($source_account, auth.addr, getValue) === true) || (util.isCksumAddr($source_account) && $source_account === auth.addr)) && getValue('/escrow/' + $source_account + '/' + $target_account + '/' + $escrow_key + '/config') !== null && data === null && util.isDict(newData)"
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_hold'"
                }
              }
            }
          },
          "release": {
            "$record_id": {
              ".rule": {
                "write": "getValue('/escrow/' + $source_account + '/' + $target_account + '/' + $escrow_key + '/config/admin/' + auth.addr) === true && data === null && util.isDict(newData) && util.isNumber(newData.ratio) && 0 <= newData.ratio && newData.ratio <= 1"
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_release'"
                }
              }
            }
          }
        }
      }
    }
  },
  "gas_fee": {
    "claim": {
      "$user_addr": {
        "$record_id": {
          ".rule": {
            "write": "auth.addr === $user_addr && util.validateClaimRewardData(auth.addr, newData, getValue) === true"
          }
        }
      }
    },
    "collect": {
      "$block_number": {
        "$from": {
          "$tx_hash": {
            ".rule": {
              "write": "(auth.addr === $from || (util.isServAcntName($from) && util.isBillingUser($from, auth.addr, getValue) === true)) && util.validateCollectFeeData(data, newData, $from, getValue)"
            }
          }
        }
      }
    }
  },
  "manage_app": {
    "$app_name": {
      "config": {
        ".rule": {
          "write": "auth.fid === '_createApp' || util.isAppAdmin($app_name, auth.addr, getValue) === true"
        }
      },
      "create": {
        "$record_id": {
          ".rule": {
            "write": "data === null && getValue('/manage_app/' + $app_name + '/config') === null && util.isDict(newData)"
          },
          "result": {
            ".rule": {
              "write": "auth.fid === '_createApp'"
            }
          }
        }
      }
    }
  },
  "payments": {
    "$service_name": {
      "$user_addr": {
        "$payment_key": {
          "claim": {
            "$record_id": {
              ".rule": {
                "write": "util.isAppAdmin($service_name, auth.addr, getValue) === true && data === null && util.isDict(newData) && util.isNumber(newData.amount) && newData.amount > 0 && (util.isCksumAddr(newData.target) || util.isServAcntName(newData.target))"
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_claim'"
                }
              }
            }
          },
          "pay": {
            "$record_id": {
              ".rule": {
                "write": "util.isAppAdmin($service_name, auth.addr, getValue) === true && data === null && util.isDict(newData) && util.isNumber(newData.amount) && newData.amount > 0"
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_pay'"
                }
              }
            }
          }
        }
      }
    }
  },
  "service_accounts": {
    "$service_type": {
      "$service_name": {
        "$key": {
          "balance": {
            ".rule": {
              "write": "auth.fid === '_transfer'"
            }
          }
        }
      }
    }
  },
  "sharding": {
    "shard": {
      ".rule": {
        "write": false
      },
      "$sharding_path": {
        ".rule": {
          "write": "(data === null && util.isDict(newData) && util.isString(newData.sharding_path) && util.isString(newData.parent_chain_poc) && util.isNumber(newData.reporting_period) && util.isValAddr(newData.shard_owner) && util.isValAddr(newData.shard_reporter) && util.isValShardProto(newData.sharding_protocol) && evalOwner(newData.sharding_path, 'write_owner', auth) && evalOwner(newData.sharding_path, 'write_rule', auth) && evalOwner(newData.sharding_path, 'write_function', auth)) || (auth.addr === data.shard_owner && newData === null)"
        }
      }
    }
  },
  "staking": {
    "$service_name": {
      "balance_total": {
        ".rule": {
          "write": "auth.fid === '_stake' || auth.fid === '_unstake'"
        }
      },
      "$user_addr": {
        "$staking_key": {
          "expire_at": {
            ".rule": {
              "write": "auth.fid === '_stake' || auth.fid === '_handleOffenses'"
            }
          },
          "stake": {
            "$record_id": {
              "value": {
                ".rule": {
                  "write": "$user_addr === auth.addr && data === null && util.isNumber(newData) && newData >= 0 && getValue('/accounts/' + $user_addr + '/balance') >= newData"
                }
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_stake'"
                }
              }
            }
          },
          "unstake": {
            "$record_id": {
              "value": {
                ".rule": {
                  "write": "$user_addr === auth.addr && data === null && util.isNumber(newData) && newData > 0 && newData <= util.getBalance(util.toServiceAccountName('staking', $service_name, $user_addr + '|' + $staking_key), getValue)"
                }
              },
              "result": {
                ".rule": {
                  "write": "auth.fid === '_unstake'"
                }
              }
            }
          }
        }
      }
    }
  },
  "transfer": {
    "$from": {
      "$to": {
        "$key": {
          "value": {
            ".rule": {
              "write": "(auth.addr === $from || auth.fid === '_stake' || auth.fid === '_unstake' || auth.fid === '_pay' || auth.fid === '_claim' || auth.fid === '_hold' || auth.fid === '_release' || auth.fid === '_collectFee' || auth.fid === '_claimReward' || auth.fid === '_openCheckout' || auth.fid === '_closeCheckout') && !getValue('transfer/' + $from + '/' + $to + '/' + $key) && (util.isServAcntName($from) || util.isCksumAddr($from)) && (util.isServAcntName($to) || util.isCksumAddr($to)) && $from !== $to && util.isNumber(newData) && util.getBalance($from, getValue) >= newData"
            }
          },
          "result": {
            ".rule": {
              "write": "auth.fid === '_transfer'"
            }
          }
        }
      }
    }
  }
}
